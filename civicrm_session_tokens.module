<?php

/**
 * Implements hook_user_login().
 */
function civicrm_session_tokens_user_login($edit, $account) {
  civicrm_initialize();

  try {
    // Populate contact details.
    $_SESSION['civicrm_session_tokens'] = civicrm_api3('UFMatch', 'getsingle', array(
      'sequential' => 1,
      'uf_id' => $account->uid,
    ));
    // Populate active memberships.
    // 1. First get the list of active membership types.
    $currentMembershipTypes = civicrm_api3('MembershipStatus', 'get', array(
      'sequential' => 1,
    ));

    $membershipTypeIds = array();
    $currentMembershipTypeIds = array();
    foreach ($currentMembershipTypes['values'] as $eachCurrentMembershipType) {
      $membershipTypeIds[] = $eachCurrentMembershipType['id'];
      if ($eachCurrentMembershipType['is_current_member']) {
        $currentMembershipTypeIds[] = $eachCurrentMembershipType['id'];
      }
    }

    // 2. Then pass their ids as parameters to the get command.
    $getActiveMembershipParams = array(
      'sequential' => 1,
      'status_id' => $currentMembershipTypeIds,
      'membership_type_id' => array('IN' => $currentMembershipTypeIds),
      'contact_id' => $_SESSION['civicrm_session_tokens']['contact_id'],
      'length' => 0,
    );
    $activeMembershipDetails = civicrm_api3('Membership', 'get', $getActiveMembershipParams);

    $membershipByType = array();

    $membershipTypeDetails = civicrm_api3('MembershipType', 'get', array('sequential' => 0, 'length' => 0));

    foreach ($activeMembershipDetails['values'] as $eachMembership) {
      $membershipTypeName = $membershipTypeDetails['values'][$eachMembership['membership_type_id']]['name'];
      $activeMembershipPrefix = 'active_memberships_' . str_replace(' ', '_', strtolower($membershipTypeName)) . '_';
      foreach ($eachMembership as $key => $value) {
        $_SESSION['civicrm_session_tokens'][$activeMembershipPrefix . $key] = $value;
      }
    }

    $_SESSION['civicrm_session_tokens']['active_memberships'] = $membershipByType;

    // Populate active relationships.
    $activeRelationshipDetailsA = civicrm_api3('Relationship', 'get', array(
      'sequential' => 1,
      'contact_id_a' => $_SESSION['civicrm_session_tokens']['contact_id'],
      'is_active' => true,
      'length' => 0,
    ));

    $_SESSION['civicrm_session_tokens']['active_relationships_a'] = $activeRelationshipDetailsA['values'];

    $activeRelationshipDetailsB = civicrm_api3('Relationship', 'get', array(
      'sequential' => 1,
      'contact_id_b' => $_SESSION['civicrm_session_tokens']['contact_id'],
      'is_active' => true,
      'length' => 0,
    ));

    $_SESSION['civicrm_session_tokens']['active_relationships_b'] = $activeRelationshipDetailsB['values'];

    watchdog('CiviCRM Session Vars', '' . print_r($_SESSION, TRUE), array(), WATCHDOG_DEBUG);

  } catch (Exception $ex) {
    drupal_set_message($ex->getMessage(), 'error');
  }
}

function civicrm_session_tokens_token_info() {
  $info = array();

  $info['types']['civicrm_session_tokens'] = array(
    'name' => t('Current user CiviCRM'),
    'description' => t('Tokens related to the CiviCRM details of the logged in user.'),
  );

  foreach ($_SESSION['civicrm_session_tokens'] as $key => $value) {
    $info['tokens']['civicrm_session_tokens'][$key] = array ('name' => t("test $key"), 'description' => t('test'));
  }
  return $info;
}

/**
 * Implements hook_tokens().
 */
function civicrm_session_tokens_tokens($type, $tokens, array $data = array(), array $options = array()) {
  civicrm_initialize();
  
  if ($type != 'civicrm_session_tokens') {
    return array();
  }

  foreach ($tokens as $name => $original) {
    $replacements[$original] = $_SESSION['civicrm_session_tokens'][$name];
  }
  return $replacements;
}

function civicrm_session_tokens_views_pre_view(&$view, &$display_id, &$args){
  
  
  $filters = $view->get_items('filter', $display_id);
  foreach ($filters as &$filter) {
    if (!array_key_exists('value', $filter)){
      continue;
    }
    if (!is_array($filter['value'])){
      continue;
    }
    foreach($filter['value'] as $key => $value){
      $filter['value'][$key] = token_replace($value);
    }
    $filter = $view->set_item($display_id, 'filter', $filter['id'], $filter);
  }
}
